---
import { Image } from 'astro:assets'
import { getCollection, type CollectionEntry } from 'astro:content'
import BaseHead from '@components/BaseHead.astro'
import Header from '@components/Header.astro'
import Footer from '@components/Footer.astro'
import FormattedDate from '@components/FormattedDate.astro'
import SeriesPosts from '@components/SeriesPosts'

type Props = CollectionEntry<'blog'>['data'] & { minutesRead: string }

const { title, description, minutesRead, pubDate, updatedDate, image, caption, series } = Astro.props

async function getSeriesPosts () {
	const posts = await getCollection('blog')
	return posts.filter((post) => post.data.series === series)
}

const seriesPosts = series !== undefined ? await getSeriesPosts() : []
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} image={image?.src} />
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="title">
					<h1>{title}</h1>
					<div class="date">
						<FormattedDate date={pubDate} />&nbsp;&nbsp;â€¢&nbsp;&nbsp;{minutesRead}
						{
							updatedDate && (
								<div class="last-updated-on">
									Last updated on <FormattedDate date={updatedDate} />
								</div>
							)
						}
					</div>
				</div>

				<div class="hero-image">
					<figure>
						{image && (
							<Image
								src={image}
								alt={caption ?? ''}
								loading="eager"
								widths={[420, 768, 850]}
							/>
						)}
						{caption && <figcaption set:html={caption} />}
					</figure>
				</div>

				<div class="post__content">
					<slot />
				</div>
			</article>
			{series !== undefined && (
				<SeriesPosts
					currentTitle={title}
					series={series}
					posts={seriesPosts}
					client:idle
				/>
			)}
		</main>
		<Footer />
	</body>
</html>

<style lang="scss">
@import '@styles/vars.scss';

article {
	max-width: 720px;
	margin: auto;
	color: rgb(var(--gray-dark));
}
.title {
	margin-bottom: var(--space-l);
	text-align: center;
	line-height: 1;
}
.title h1 {
	font-size: var(--fs-6);
	margin-bottom: var(--space-xxs);

	@include tablet {
		font-size: var(--fs-8);
	}
}
.date {
	font-size: var(--fs-2);
	color: rgb(var(--gray));
}
.last-updated-on {
	font-style: italic;
}
.hero-image {
	position: relative;
	margin-bottom: var(--space-l);

	@include mobile {
		margin-inline: -0.8em;
	}
	@include tablet {
		left: 50%;
		width: 100vw;
	}

	figure {
		display: flex;
		flex-direction: column;
		align-items: center;
		position: relative;
		margin: 0 auto;

		@include tablet {
			left: -50%;
			max-width: min(100vw, calc($tablet + 3em));
		}
	}

	img {
		display: block;
		border-radius: 0.8em;
		// box-shadow: var(--box-shadow);
	}

	figcaption {
		margin-top: var(--space-s);
		font-size: 80%;
		color: #5a5a5a;
		text-align: center;
	}
}
</style>

<style lang="scss" is:global>
@import '@styles/vars.scss';

.post__content {
	color: #333;
	line-height: 2;

	@include tablet {
		line-height: 1.8;
	}

	h2, h3, h4 {
		font-family: var(--font-2);
		color: #222;
		margin-bottom: var(--space-xs);
		letter-spacing: -0.025em;

		+ p {
			margin-top: 0;
		}
	}

	p, li {
		font-size: calc(var(--fs-3) * var(--fs-half-ratio));
	}

	h2 {
		margin-top: var(--space-m);
		font-weight: 600;
		font-size: var(--fs-6);
	}
	h3 {
		font-weight: 500;
		font-size: var(--fs-5);
	}
	h4 {
		font-weight: 500;
		font-size: var(--fs-4);
	}

	p, .expressive-code {
		margin-block: var(--space-l);
	}

	p + ul, p + ol {
		margin-top: calc(var(--space-m) * -1);
	}

	ul, ol {
		padding-left: var(--space-l);
	}
	ul > li::marker {
		content: '\f0da\0020\0020\0020';
		font-family: var(--font-awesome);
		font-weight: 900;
		color: $blue-text;
	}
	ol > li::marker {
		color: $blue-text;
	}

	mark {
		background-color: $green-2;
	}

	blockquote {
		all: unset;
		display: block;
		padding: var(--space-m);
		font-family: var(--font-2);
		font-style: italic;
		margin-bottom: var(--space-l);

		> p {
			font-size: var(--fs-3);
			margin-bottom: 0;
		}

		&:before {
			@include font-awesome;
			content: '\f10d';
			display: block;
			margin-bottom: var(--space-m);
			font-size: var(--fs-6);
			color: $blue-text;
			line-height: 1;
		}

		&:after {
			@include font-awesome;
			content: '\f10e';
			display: block;
			margin-top: var(--space-m);
			font-size: var(--fs-6);
			color: $blue-text;
			text-align: right;
			line-height: 1;
		}
	}

	table, th, td {
		border: 1px solid #bbb;
		border-collapse: collapse;
	}

	th, td {
		font-size: 1rem;
		padding: var(--space-xs);
	}

	pre {
		--ec-codeFontSize: 12px;

		@include tablet {
			--ec-codeFontSize: 14px;
		}
	}

	details {
		margin-bottom: var(--details-spacing);
		background: $orange-1;
		font-size: 90%;
		border-radius: 0.6em;

		p, .expressive-code {
			margin-block: var(--space-m);
		}

		summary {
			font-weight: bold;
			padding: var(--details-spacing);
			cursor: pointer;
		}

		&[open] {
			padding: var(--details-spacing);
		}

		&[open] summary {
			border-bottom: 1px solid $orange-3;
			margin: calc(var(--details-spacing) * -1);
			margin-bottom: var(--details-spacing);
		}
	}

	[data-footnotes] {
		font-size: 90%;
		padding-top: var(--space-l);
		border-top: 2px solid #eee;

		p {
			margin: 0;
		}
	}
}

lite-youtube {
	border-radius: 1em;

	& + & {
		margin-top: var(--space-m);
	}
}
</style>
